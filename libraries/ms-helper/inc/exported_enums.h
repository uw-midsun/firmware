#pragma once

#include "can_msg_defs.h"

// This file stores enums which are exported between projects to allow both sides to use the same
// enums when sending and receiving CAN Messages over the primary network. To make things easier all
// enums in this file must follow a slightly modified naming convention.
//
// Example:
// typedef enum {
//   EE_<MY_CAN_MESSAGE_NAME>_<FIELD_NAME>_<VALUE> = 0,
//   // ...
//   NUM_EE_<MY_CAN_MESSAGE_NAME>_<FIELD_NAME>_<PLURAL>,
// } EE<MyCanMessageName><FieldName>

typedef enum {
  EE_CHARGER_SET_RELAY_STATE_OPEN = 0,
  EE_CHARGER_SET_RELAY_STATE_CLOSE,
  NUM_EE_CHARGER_SET_RELAY_STATES,
} EEChargerSetRelayState;

typedef enum {
  EE_CHARGER_CONN_STATE_DISCONNECTED = 0,
  EE_CHARGER_CONN_STATE_CONNECTED,
  NUM_EE_CHARGER_CONN_STATES,
} EEChargerConnState;

// Drive output
// Mech brake + throttle
#define EE_DRIVE_OUTPUT_DENOMINATOR (1 << 12)
// Arbitrary 5% minimum pressure before considering it as engaged
#define EE_DRIVE_OUTPUT_MECH_THRESHOLD (5 * (EE_DRIVE_OUTPUT_DENOMINATOR) / 100)

typedef enum {
  EE_DRIVE_OUTPUT_DIRECTION_NEUTRAL = 0,
  EE_DRIVE_OUTPUT_DIRECTION_FORWARD,
  EE_DRIVE_OUTPUT_DIRECTION_REVERSE,
  NUM_EE_DRIVE_OUTPUT_DIRECTIONS,
} EEDriveOutputDirection;

// Light type to be used with a SYSTEM_CAN_MESSAGE_LIGHTS_STATE message.
typedef enum EELightType {
  EE_LIGHT_TYPE_HIGH_BEAMS = 0,
  EE_LIGHT_TYPE_LOW_BEAMS,
  EE_LIGHT_TYPE_DRL,
  EE_LIGHT_TYPE_BRAKES,
  EE_LIGHT_TYPE_SIGNAL_RIGHT,
  EE_LIGHT_TYPE_SIGNAL_LEFT,
  EE_LIGHT_TYPE_SIGNAL_HAZARD,
  EE_LIGHT_TYPE_STROBE,
  NUM_EE_LIGHT_TYPES,
} EELightType;

// Light state to be used with a SYSTEM_CAN_MESSAGE_LIGHTS_STATE message.
typedef enum EELightState {
  EE_LIGHT_STATE_OFF = 0,  //
  EE_LIGHT_STATE_ON,       //
  NUM_EE_LIGHT_STATES,     //
} EELightState;

// Horn state, used with a SYSTEM_CAN_MESSAGE_HORN message.
typedef enum EEHornState {
  EE_HORN_STATE_OFF = 0,  //
  EE_HORN_STATE_ON,       //
  NUM_EE_HORN_STATES,     //
} EEHornState;

// Used with most _RELAY messages to request a relay state change.
typedef enum EERelayState {
  EE_RELAY_STATE_OPEN = 0,
  EE_RELAY_STATE_CLOSE,
  NUM_EE_RELAY_STATES,
} EERelayState;

// Used with the POWER_STATE message sent from driver controls to power distribution to request a
// state change.
typedef enum {
  EE_POWER_STATE_IDLE = 0,
  EE_POWER_STATE_CHARGE,
  EE_POWER_STATE_DRIVE,
  NUM_EE_POWER_STATES,
} EEPowerState;

// Used with the BPS heartbeat message
typedef enum {
  EE_BPS_HEARTBEAT_FAULT_SOURCE_KILLSWITCH = 0,
  EE_BPS_HEARTBEAT_FAULT_SOURCE_LTC_AFE_CELL,
  EE_BPS_HEARTBEAT_FAULT_SOURCE_LTC_AFE_TEMP,
  EE_BPS_HEARTBEAT_FAULT_SOURCE_LTC_AFE_FSM,
  EE_BPS_HEARTBEAT_FAULT_SOURCE_LTC_ADC,
  EE_BPS_HEARTBEAT_FAULT_SOURCE_ACK_TIMEOUT,
  NUM_EE_BPS_HEARTBEAT_FAULT_SOURCES,
} EEBpsHeartbeatFaultSource;

// BPS heartbeat bitset representing fault reason
typedef uint8_t EEBpsHeartbeatState;
#define EE_BPS_HEARTBEAT_STATE_OK 0x0
#define EE_BPS_HEARTBEAT_STATE_FAULT_KILLSWITCH (1 << EE_BPS_HEARTBEAT_FAULT_SOURCE_KILLSWITCH)
#define EE_BPS_HEARTBEAT_STATE_FAULT_LTC_AFE_CELL (1 << EE_BPS_HEARTBEAT_FAULT_SOURCE_LTC_AFE_CELL)
#define EE_BPS_HEARTBEAT_STATE_FAULT_LTC_AFE_TEMP (1 << EE_BPS_HEARTBEAT_FAULT_SOURCE_LTC_AFE_TEMP)
#define EE_BPS_HEARTBEAT_STATE_FAULT_LTC_AFE_FSM (1 << EE_BPS_HEARTBEAT_FAULT_SOURCE_LTC_AFE_FSM)
#define EE_BPS_HEARTBEAT_STATE_FAULT_LTC_ADC (1 << EE_BPS_HEARTBEAT_FAULT_SOURCE_LTC_ADC)
#define EE_BPS_HEARTBEAT_STATE_FAULT_ACK_TIMEOUT (1 << EE_BPS_HEARTBEAT_FAULT_SOURCE_ACK_TIMEOUT)

typedef enum {
  EE_FAN_CONTROL_STATE_ENABLE = 0,
  EE_FAN_CONTROL_STATE_DISABLE,
  NUM_EE_FAN_CONTROL_STATE,
} EEFanControlStates;

typedef enum {
  EE_POWER_DISTRIBUTION_FAULT_REASON_BPS_HB = 0,
  EE_POWER_DISTRIBUTION_FAULT_REASON_BPS_HB_WATCHDOG,
  EE_POWER_DISTRIBUTION_FAULT_REASON_POWERTRAIN_HB_WATCHDOG,
  EE_POWER_DISTRIBUTION_FAULT_REASON_RELAY_RETRY_EXPIRY,
  EE_POWER_DISTRIBUTION_FAULT_REASON_SEQUENCE_RETRY_EXPIRY,
  NUM_EE_POWER_DISTRIBUTION_FAULT_REASONS,
} EEPowerDistributionFaultReason;

// Events raised by Driver Controls: Steering
typedef enum {
  // Digital Events
  // Horn
  EE_STEERING_INPUT_HORN_PRESSED = 0u,
  EE_STEERING_INPUT_HORN_RELEASED,
  // CC On/Off
  EE_STEERING_INPUT_CC_ON_OFF_PRESSED,
  EE_STEERING_INPUT_CC_ON_OFF_RELEASED,
  // CC Set
  EE_STEERING_INPUT_CC_SET_PRESSED,
  EE_STEERING_INPUT_CC_SET_RELEASED,

  // Analog Events
  // CC Speed +/-
  EE_STEERING_INPUT_CC_SPEED_NEUTRAL,
  EE_STEERING_INPUT_CC_SPEED_PLUS,
  EE_STEERING_INPUT_CC_SPEED_MINUS,
  // CC Cancel/Resume
  EE_STEERING_INPUT_CC_CANCEL_RESUME_NEUTRAL,
  EE_STEERING_INPUT_CC_CANCEL_RESUME_CANCEL,
  EE_STEERING_INPUT_CC_CANCEL_RESUME_RESUME,
  // Turn Signal
  EE_STEERING_INPUT_TURN_SIGNAL_STALK_NONE,
  EE_STEERING_INPUT_TURN_SIGNAL_STALK_LEFT,
  EE_STEERING_INPUT_TURN_SIGNAL_STALK_RIGHT,
  // CC Follow Distance
  EE_STEERING_INPUT_EVENT_CC_DISTANCE_NEUTRAL,
  EE_STEERING_INPUT_EVENT_CC_DISTANCE_MINUS,
  EE_STEERING_INPUT_EVENT_CC_DISTANCE_PLUS,
  NUM_EE_STEERING_INPUTS,
} EESteeringInputs;

// Events raised by Driver Controls: Center Console
typedef enum {
  EE_CENTER_CONSOLE_DIGITAL_INPUT_BPS = 0,
  EE_CENTER_CONSOLE_DIGITAL_INPUT_LOW_BEAM,
  EE_CENTER_CONSOLE_DIGITAL_INPUT_DRL,
  EE_CENTER_CONSOLE_DIGITAL_INPUT_DRIVE,
  EE_CENTER_CONSOLE_DIGITAL_INPUT_NEUTRAL,
  EE_CENTER_CONSOLE_DIGITAL_INPUT_REVERSE,
  EE_CENTER_CONSOLE_DIGITAL_INPUT_POWER,
  EE_CENTER_CONSOLE_DIGITAL_INPUT_HAZARDS,
  NUM_EE_CENTER_CONSOLE_DIGITAL_INPUTS,
} EECenterConsoleDigitalInput;
